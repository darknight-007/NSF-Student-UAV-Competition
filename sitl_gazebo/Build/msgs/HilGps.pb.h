// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HilGps.proto

#ifndef PROTOBUF_HilGps_2eproto__INCLUDED
#define PROTOBUF_HilGps_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mavlink {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HilGps_2eproto();
void protobuf_AssignDesc_HilGps_2eproto();
void protobuf_ShutdownFile_HilGps_2eproto();

class HilGps;

// ===================================================================

class HilGps : public ::google::protobuf::Message {
 public:
  HilGps();
  virtual ~HilGps();

  HilGps(const HilGps& from);

  inline HilGps& operator=(const HilGps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HilGps& default_instance();

  void Swap(HilGps* other);

  // implements Message ----------------------------------------------

  HilGps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HilGps& from);
  void MergeFrom(const HilGps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time_usec = 1;
  inline bool has_time_usec() const;
  inline void clear_time_usec();
  static const int kTimeUsecFieldNumber = 1;
  inline ::google::protobuf::uint64 time_usec() const;
  inline void set_time_usec(::google::protobuf::uint64 value);

  // required int32 fix_type = 2;
  inline bool has_fix_type() const;
  inline void clear_fix_type();
  static const int kFixTypeFieldNumber = 2;
  inline ::google::protobuf::int32 fix_type() const;
  inline void set_fix_type(::google::protobuf::int32 value);

  // required int32 lat = 3;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 3;
  inline ::google::protobuf::int32 lat() const;
  inline void set_lat(::google::protobuf::int32 value);

  // required int32 lon = 4;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 4;
  inline ::google::protobuf::int32 lon() const;
  inline void set_lon(::google::protobuf::int32 value);

  // required int32 alt = 5;
  inline bool has_alt() const;
  inline void clear_alt();
  static const int kAltFieldNumber = 5;
  inline ::google::protobuf::int32 alt() const;
  inline void set_alt(::google::protobuf::int32 value);

  // required uint32 eph = 6;
  inline bool has_eph() const;
  inline void clear_eph();
  static const int kEphFieldNumber = 6;
  inline ::google::protobuf::uint32 eph() const;
  inline void set_eph(::google::protobuf::uint32 value);

  // required uint32 epv = 7;
  inline bool has_epv() const;
  inline void clear_epv();
  static const int kEpvFieldNumber = 7;
  inline ::google::protobuf::uint32 epv() const;
  inline void set_epv(::google::protobuf::uint32 value);

  // required uint32 vel = 8;
  inline bool has_vel() const;
  inline void clear_vel();
  static const int kVelFieldNumber = 8;
  inline ::google::protobuf::uint32 vel() const;
  inline void set_vel(::google::protobuf::uint32 value);

  // required int32 vn = 9;
  inline bool has_vn() const;
  inline void clear_vn();
  static const int kVnFieldNumber = 9;
  inline ::google::protobuf::int32 vn() const;
  inline void set_vn(::google::protobuf::int32 value);

  // required int32 ve = 10;
  inline bool has_ve() const;
  inline void clear_ve();
  static const int kVeFieldNumber = 10;
  inline ::google::protobuf::int32 ve() const;
  inline void set_ve(::google::protobuf::int32 value);

  // required int32 vd = 11;
  inline bool has_vd() const;
  inline void clear_vd();
  static const int kVdFieldNumber = 11;
  inline ::google::protobuf::int32 vd() const;
  inline void set_vd(::google::protobuf::int32 value);

  // required uint32 cog = 12;
  inline bool has_cog() const;
  inline void clear_cog();
  static const int kCogFieldNumber = 12;
  inline ::google::protobuf::uint32 cog() const;
  inline void set_cog(::google::protobuf::uint32 value);

  // optional uint32 satellites_visible = 13;
  inline bool has_satellites_visible() const;
  inline void clear_satellites_visible();
  static const int kSatellitesVisibleFieldNumber = 13;
  inline ::google::protobuf::uint32 satellites_visible() const;
  inline void set_satellites_visible(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mavlink.msgs.HilGps)
 private:
  inline void set_has_time_usec();
  inline void clear_has_time_usec();
  inline void set_has_fix_type();
  inline void clear_has_fix_type();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_alt();
  inline void clear_has_alt();
  inline void set_has_eph();
  inline void clear_has_eph();
  inline void set_has_epv();
  inline void clear_has_epv();
  inline void set_has_vel();
  inline void clear_has_vel();
  inline void set_has_vn();
  inline void clear_has_vn();
  inline void set_has_ve();
  inline void clear_has_ve();
  inline void set_has_vd();
  inline void clear_has_vd();
  inline void set_has_cog();
  inline void clear_has_cog();
  inline void set_has_satellites_visible();
  inline void clear_has_satellites_visible();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_usec_;
  ::google::protobuf::int32 fix_type_;
  ::google::protobuf::int32 lat_;
  ::google::protobuf::int32 lon_;
  ::google::protobuf::int32 alt_;
  ::google::protobuf::uint32 eph_;
  ::google::protobuf::uint32 epv_;
  ::google::protobuf::uint32 vel_;
  ::google::protobuf::int32 vn_;
  ::google::protobuf::int32 ve_;
  ::google::protobuf::int32 vd_;
  ::google::protobuf::uint32 cog_;
  ::google::protobuf::uint32 satellites_visible_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_HilGps_2eproto();
  friend void protobuf_AssignDesc_HilGps_2eproto();
  friend void protobuf_ShutdownFile_HilGps_2eproto();

  void InitAsDefaultInstance();
  static HilGps* default_instance_;
};
// ===================================================================


// ===================================================================

// HilGps

// required uint64 time_usec = 1;
inline bool HilGps::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HilGps::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HilGps::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HilGps::clear_time_usec() {
  time_usec_ = GOOGLE_ULONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::uint64 HilGps::time_usec() const {
  return time_usec_;
}
inline void HilGps::set_time_usec(::google::protobuf::uint64 value) {
  set_has_time_usec();
  time_usec_ = value;
}

// required int32 fix_type = 2;
inline bool HilGps::has_fix_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HilGps::set_has_fix_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HilGps::clear_has_fix_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HilGps::clear_fix_type() {
  fix_type_ = 0;
  clear_has_fix_type();
}
inline ::google::protobuf::int32 HilGps::fix_type() const {
  return fix_type_;
}
inline void HilGps::set_fix_type(::google::protobuf::int32 value) {
  set_has_fix_type();
  fix_type_ = value;
}

// required int32 lat = 3;
inline bool HilGps::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HilGps::set_has_lat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HilGps::clear_has_lat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HilGps::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline ::google::protobuf::int32 HilGps::lat() const {
  return lat_;
}
inline void HilGps::set_lat(::google::protobuf::int32 value) {
  set_has_lat();
  lat_ = value;
}

// required int32 lon = 4;
inline bool HilGps::has_lon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HilGps::set_has_lon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HilGps::clear_has_lon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HilGps::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline ::google::protobuf::int32 HilGps::lon() const {
  return lon_;
}
inline void HilGps::set_lon(::google::protobuf::int32 value) {
  set_has_lon();
  lon_ = value;
}

// required int32 alt = 5;
inline bool HilGps::has_alt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HilGps::set_has_alt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HilGps::clear_has_alt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HilGps::clear_alt() {
  alt_ = 0;
  clear_has_alt();
}
inline ::google::protobuf::int32 HilGps::alt() const {
  return alt_;
}
inline void HilGps::set_alt(::google::protobuf::int32 value) {
  set_has_alt();
  alt_ = value;
}

// required uint32 eph = 6;
inline bool HilGps::has_eph() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HilGps::set_has_eph() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HilGps::clear_has_eph() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HilGps::clear_eph() {
  eph_ = 0u;
  clear_has_eph();
}
inline ::google::protobuf::uint32 HilGps::eph() const {
  return eph_;
}
inline void HilGps::set_eph(::google::protobuf::uint32 value) {
  set_has_eph();
  eph_ = value;
}

// required uint32 epv = 7;
inline bool HilGps::has_epv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HilGps::set_has_epv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HilGps::clear_has_epv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HilGps::clear_epv() {
  epv_ = 0u;
  clear_has_epv();
}
inline ::google::protobuf::uint32 HilGps::epv() const {
  return epv_;
}
inline void HilGps::set_epv(::google::protobuf::uint32 value) {
  set_has_epv();
  epv_ = value;
}

// required uint32 vel = 8;
inline bool HilGps::has_vel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HilGps::set_has_vel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HilGps::clear_has_vel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HilGps::clear_vel() {
  vel_ = 0u;
  clear_has_vel();
}
inline ::google::protobuf::uint32 HilGps::vel() const {
  return vel_;
}
inline void HilGps::set_vel(::google::protobuf::uint32 value) {
  set_has_vel();
  vel_ = value;
}

// required int32 vn = 9;
inline bool HilGps::has_vn() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HilGps::set_has_vn() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HilGps::clear_has_vn() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HilGps::clear_vn() {
  vn_ = 0;
  clear_has_vn();
}
inline ::google::protobuf::int32 HilGps::vn() const {
  return vn_;
}
inline void HilGps::set_vn(::google::protobuf::int32 value) {
  set_has_vn();
  vn_ = value;
}

// required int32 ve = 10;
inline bool HilGps::has_ve() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HilGps::set_has_ve() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HilGps::clear_has_ve() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HilGps::clear_ve() {
  ve_ = 0;
  clear_has_ve();
}
inline ::google::protobuf::int32 HilGps::ve() const {
  return ve_;
}
inline void HilGps::set_ve(::google::protobuf::int32 value) {
  set_has_ve();
  ve_ = value;
}

// required int32 vd = 11;
inline bool HilGps::has_vd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HilGps::set_has_vd() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HilGps::clear_has_vd() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HilGps::clear_vd() {
  vd_ = 0;
  clear_has_vd();
}
inline ::google::protobuf::int32 HilGps::vd() const {
  return vd_;
}
inline void HilGps::set_vd(::google::protobuf::int32 value) {
  set_has_vd();
  vd_ = value;
}

// required uint32 cog = 12;
inline bool HilGps::has_cog() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HilGps::set_has_cog() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HilGps::clear_has_cog() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HilGps::clear_cog() {
  cog_ = 0u;
  clear_has_cog();
}
inline ::google::protobuf::uint32 HilGps::cog() const {
  return cog_;
}
inline void HilGps::set_cog(::google::protobuf::uint32 value) {
  set_has_cog();
  cog_ = value;
}

// optional uint32 satellites_visible = 13;
inline bool HilGps::has_satellites_visible() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HilGps::set_has_satellites_visible() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HilGps::clear_has_satellites_visible() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HilGps::clear_satellites_visible() {
  satellites_visible_ = 0u;
  clear_has_satellites_visible();
}
inline ::google::protobuf::uint32 HilGps::satellites_visible() const {
  return satellites_visible_;
}
inline void HilGps::set_satellites_visible(::google::protobuf::uint32 value) {
  set_has_satellites_visible();
  satellites_visible_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace mavlink

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HilGps_2eproto__INCLUDED
