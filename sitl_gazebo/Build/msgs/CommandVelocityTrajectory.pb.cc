// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommandVelocityTrajectory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommandVelocityTrajectory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mav_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CommandVelocityTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandVelocityTrajectory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommandVelocityTrajectory_2eproto() {
  protobuf_AddDesc_CommandVelocityTrajectory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommandVelocityTrajectory.proto");
  GOOGLE_CHECK(file != NULL);
  CommandVelocityTrajectory_descriptor_ = file->message_type(0);
  static const int CommandVelocityTrajectory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandVelocityTrajectory, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandVelocityTrajectory, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandVelocityTrajectory, jerk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandVelocityTrajectory, snap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandVelocityTrajectory, yaw_rate_),
  };
  CommandVelocityTrajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandVelocityTrajectory_descriptor_,
      CommandVelocityTrajectory::default_instance_,
      CommandVelocityTrajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandVelocityTrajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandVelocityTrajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandVelocityTrajectory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommandVelocityTrajectory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandVelocityTrajectory_descriptor_, &CommandVelocityTrajectory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommandVelocityTrajectory_2eproto() {
  delete CommandVelocityTrajectory::default_instance_;
  delete CommandVelocityTrajectory_reflection_;
}

void protobuf_AddDesc_CommandVelocityTrajectory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037CommandVelocityTrajectory.proto\022\rmav_m"
    "sgs.msgs\032\016vector3d.proto\"\315\001\n\031CommandVelo"
    "cityTrajectory\022\'\n\010velocity\030\001 \002(\0132\025.gazeb"
    "o.msgs.Vector3d\022+\n\014acceleration\030\002 \002(\0132\025."
    "gazebo.msgs.Vector3d\022#\n\004jerk\030\003 \002(\0132\025.gaz"
    "ebo.msgs.Vector3d\022#\n\004snap\030\004 \002(\0132\025.gazebo"
    ".msgs.Vector3d\022\020\n\010yaw_rate\030\005 \002(\002", 272);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommandVelocityTrajectory.proto", &protobuf_RegisterTypes);
  CommandVelocityTrajectory::default_instance_ = new CommandVelocityTrajectory();
  CommandVelocityTrajectory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommandVelocityTrajectory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommandVelocityTrajectory_2eproto {
  StaticDescriptorInitializer_CommandVelocityTrajectory_2eproto() {
    protobuf_AddDesc_CommandVelocityTrajectory_2eproto();
  }
} static_descriptor_initializer_CommandVelocityTrajectory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CommandVelocityTrajectory::kVelocityFieldNumber;
const int CommandVelocityTrajectory::kAccelerationFieldNumber;
const int CommandVelocityTrajectory::kJerkFieldNumber;
const int CommandVelocityTrajectory::kSnapFieldNumber;
const int CommandVelocityTrajectory::kYawRateFieldNumber;
#endif  // !_MSC_VER

CommandVelocityTrajectory::CommandVelocityTrajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandVelocityTrajectory::InitAsDefaultInstance() {
  velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  acceleration_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  jerk_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  snap_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

CommandVelocityTrajectory::CommandVelocityTrajectory(const CommandVelocityTrajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandVelocityTrajectory::SharedCtor() {
  _cached_size_ = 0;
  velocity_ = NULL;
  acceleration_ = NULL;
  jerk_ = NULL;
  snap_ = NULL;
  yaw_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandVelocityTrajectory::~CommandVelocityTrajectory() {
  SharedDtor();
}

void CommandVelocityTrajectory::SharedDtor() {
  if (this != default_instance_) {
    delete velocity_;
    delete acceleration_;
    delete jerk_;
    delete snap_;
  }
}

void CommandVelocityTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandVelocityTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandVelocityTrajectory_descriptor_;
}

const CommandVelocityTrajectory& CommandVelocityTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommandVelocityTrajectory_2eproto();
  return *default_instance_;
}

CommandVelocityTrajectory* CommandVelocityTrajectory::default_instance_ = NULL;

CommandVelocityTrajectory* CommandVelocityTrajectory::New() const {
  return new CommandVelocityTrajectory;
}

void CommandVelocityTrajectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_jerk()) {
      if (jerk_ != NULL) jerk_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_snap()) {
      if (snap_ != NULL) snap_->::gazebo::msgs::Vector3d::Clear();
    }
    yaw_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandVelocityTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector3d velocity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acceleration;
        break;
      }

      // required .gazebo.msgs.Vector3d acceleration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_jerk;
        break;
      }

      // required .gazebo.msgs.Vector3d jerk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jerk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jerk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_snap;
        break;
      }

      // required .gazebo.msgs.Vector3d snap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_yaw_rate;
        break;
      }

      // required float yaw_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
          set_has_yaw_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandVelocityTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gazebo.msgs.Vector3d velocity = 1;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->velocity(), output);
  }

  // required .gazebo.msgs.Vector3d acceleration = 2;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acceleration(), output);
  }

  // required .gazebo.msgs.Vector3d jerk = 3;
  if (has_jerk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->jerk(), output);
  }

  // required .gazebo.msgs.Vector3d snap = 4;
  if (has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->snap(), output);
  }

  // required float yaw_rate = 5;
  if (has_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->yaw_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandVelocityTrajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gazebo.msgs.Vector3d velocity = 1;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->velocity(), target);
  }

  // required .gazebo.msgs.Vector3d acceleration = 2;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acceleration(), target);
  }

  // required .gazebo.msgs.Vector3d jerk = 3;
  if (has_jerk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->jerk(), target);
  }

  // required .gazebo.msgs.Vector3d snap = 4;
  if (has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->snap(), target);
  }

  // required float yaw_rate = 5;
  if (has_yaw_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->yaw_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandVelocityTrajectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gazebo.msgs.Vector3d velocity = 1;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // required .gazebo.msgs.Vector3d acceleration = 2;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleration());
    }

    // required .gazebo.msgs.Vector3d jerk = 3;
    if (has_jerk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jerk());
    }

    // required .gazebo.msgs.Vector3d snap = 4;
    if (has_snap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snap());
    }

    // required float yaw_rate = 5;
    if (has_yaw_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandVelocityTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandVelocityTrajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandVelocityTrajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandVelocityTrajectory::MergeFrom(const CommandVelocityTrajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_velocity()) {
      mutable_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.velocity());
    }
    if (from.has_acceleration()) {
      mutable_acceleration()->::gazebo::msgs::Vector3d::MergeFrom(from.acceleration());
    }
    if (from.has_jerk()) {
      mutable_jerk()->::gazebo::msgs::Vector3d::MergeFrom(from.jerk());
    }
    if (from.has_snap()) {
      mutable_snap()->::gazebo::msgs::Vector3d::MergeFrom(from.snap());
    }
    if (from.has_yaw_rate()) {
      set_yaw_rate(from.yaw_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandVelocityTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandVelocityTrajectory::CopyFrom(const CommandVelocityTrajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandVelocityTrajectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_acceleration()) {
    if (!this->acceleration().IsInitialized()) return false;
  }
  if (has_jerk()) {
    if (!this->jerk().IsInitialized()) return false;
  }
  if (has_snap()) {
    if (!this->snap().IsInitialized()) return false;
  }
  return true;
}

void CommandVelocityTrajectory::Swap(CommandVelocityTrajectory* other) {
  if (other != this) {
    std::swap(velocity_, other->velocity_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(jerk_, other->jerk_);
    std::swap(snap_, other->snap_);
    std::swap(yaw_rate_, other->yaw_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandVelocityTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandVelocityTrajectory_descriptor_;
  metadata.reflection = CommandVelocityTrajectory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace mav_msgs

// @@protoc_insertion_point(global_scope)
