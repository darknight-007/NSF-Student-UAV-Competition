// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HilControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HilControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mavlink {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* HilControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HilControl_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HilControl_2eproto() {
  protobuf_AddDesc_HilControl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HilControl.proto");
  GOOGLE_CHECK(file != NULL);
  HilControl_descriptor_ = file->message_type(0);
  static const int HilControl_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, roll_ailerons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, pitch_elevator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, yaw_rudder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, aux1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, aux2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, aux3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, aux4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, nav_mode_),
  };
  HilControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HilControl_descriptor_,
      HilControl::default_instance_,
      HilControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HilControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HilControl));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HilControl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HilControl_descriptor_, &HilControl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HilControl_2eproto() {
  delete HilControl::default_instance_;
  delete HilControl_reflection_;
}

void protobuf_AddDesc_HilControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020HilControl.proto\022\014mavlink.msgs\"\314\001\n\nHil"
    "Control\022\021\n\ttime_usec\030\001 \002(\004\022\025\n\rroll_ailer"
    "ons\030\002 \002(\002\022\026\n\016pitch_elevator\030\003 \002(\002\022\022\n\nyaw"
    "_rudder\030\004 \002(\002\022\020\n\010throttle\030\005 \002(\002\022\014\n\004aux1\030"
    "\006 \001(\002\022\014\n\004aux2\030\007 \001(\002\022\014\n\004aux3\030\010 \001(\002\022\014\n\004aux"
    "4\030\t \001(\002\022\014\n\004mode\030\n \002(\r\022\020\n\010nav_mode\030\013 \002(\r", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HilControl.proto", &protobuf_RegisterTypes);
  HilControl::default_instance_ = new HilControl();
  HilControl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HilControl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HilControl_2eproto {
  StaticDescriptorInitializer_HilControl_2eproto() {
    protobuf_AddDesc_HilControl_2eproto();
  }
} static_descriptor_initializer_HilControl_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HilControl::kTimeUsecFieldNumber;
const int HilControl::kRollAileronsFieldNumber;
const int HilControl::kPitchElevatorFieldNumber;
const int HilControl::kYawRudderFieldNumber;
const int HilControl::kThrottleFieldNumber;
const int HilControl::kAux1FieldNumber;
const int HilControl::kAux2FieldNumber;
const int HilControl::kAux3FieldNumber;
const int HilControl::kAux4FieldNumber;
const int HilControl::kModeFieldNumber;
const int HilControl::kNavModeFieldNumber;
#endif  // !_MSC_VER

HilControl::HilControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HilControl::InitAsDefaultInstance() {
}

HilControl::HilControl(const HilControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HilControl::SharedCtor() {
  _cached_size_ = 0;
  time_usec_ = GOOGLE_ULONGLONG(0);
  roll_ailerons_ = 0;
  pitch_elevator_ = 0;
  yaw_rudder_ = 0;
  throttle_ = 0;
  aux1_ = 0;
  aux2_ = 0;
  aux3_ = 0;
  aux4_ = 0;
  mode_ = 0u;
  nav_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HilControl::~HilControl() {
  SharedDtor();
}

void HilControl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HilControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HilControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HilControl_descriptor_;
}

const HilControl& HilControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HilControl_2eproto();
  return *default_instance_;
}

HilControl* HilControl::default_instance_ = NULL;

HilControl* HilControl::New() const {
  return new HilControl;
}

void HilControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_usec_ = GOOGLE_ULONGLONG(0);
    roll_ailerons_ = 0;
    pitch_elevator_ = 0;
    yaw_rudder_ = 0;
    throttle_ = 0;
    aux1_ = 0;
    aux2_ = 0;
    aux3_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    aux4_ = 0;
    mode_ = 0u;
    nav_mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HilControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_usec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_roll_ailerons;
        break;
      }

      // required float roll_ailerons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll_ailerons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_ailerons_)));
          set_has_roll_ailerons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pitch_elevator;
        break;
      }

      // required float pitch_elevator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch_elevator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_elevator_)));
          set_has_pitch_elevator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yaw_rudder;
        break;
      }

      // required float yaw_rudder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw_rudder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rudder_)));
          set_has_yaw_rudder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_throttle;
        break;
      }

      // required float throttle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
          set_has_throttle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_aux1;
        break;
      }

      // optional float aux1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aux1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aux1_)));
          set_has_aux1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_aux2;
        break;
      }

      // optional float aux2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aux2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aux2_)));
          set_has_aux2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_aux3;
        break;
      }

      // optional float aux3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aux3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aux3_)));
          set_has_aux3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_aux4;
        break;
      }

      // optional float aux4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aux4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aux4_)));
          set_has_aux4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mode;
        break;
      }

      // required uint32 mode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nav_mode;
        break;
      }

      // required uint32 nav_mode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nav_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nav_mode_)));
          set_has_nav_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HilControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time_usec = 1;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_usec(), output);
  }

  // required float roll_ailerons = 2;
  if (has_roll_ailerons()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll_ailerons(), output);
  }

  // required float pitch_elevator = 3;
  if (has_pitch_elevator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch_elevator(), output);
  }

  // required float yaw_rudder = 4;
  if (has_yaw_rudder()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw_rudder(), output);
  }

  // required float throttle = 5;
  if (has_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->throttle(), output);
  }

  // optional float aux1 = 6;
  if (has_aux1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->aux1(), output);
  }

  // optional float aux2 = 7;
  if (has_aux2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->aux2(), output);
  }

  // optional float aux3 = 8;
  if (has_aux3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->aux3(), output);
  }

  // optional float aux4 = 9;
  if (has_aux4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->aux4(), output);
  }

  // required uint32 mode = 10;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mode(), output);
  }

  // required uint32 nav_mode = 11;
  if (has_nav_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nav_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HilControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time_usec = 1;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_usec(), target);
  }

  // required float roll_ailerons = 2;
  if (has_roll_ailerons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll_ailerons(), target);
  }

  // required float pitch_elevator = 3;
  if (has_pitch_elevator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch_elevator(), target);
  }

  // required float yaw_rudder = 4;
  if (has_yaw_rudder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw_rudder(), target);
  }

  // required float throttle = 5;
  if (has_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->throttle(), target);
  }

  // optional float aux1 = 6;
  if (has_aux1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->aux1(), target);
  }

  // optional float aux2 = 7;
  if (has_aux2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->aux2(), target);
  }

  // optional float aux3 = 8;
  if (has_aux3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->aux3(), target);
  }

  // optional float aux4 = 9;
  if (has_aux4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->aux4(), target);
  }

  // required uint32 mode = 10;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mode(), target);
  }

  // required uint32 nav_mode = 11;
  if (has_nav_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->nav_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HilControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_usec = 1;
    if (has_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_usec());
    }

    // required float roll_ailerons = 2;
    if (has_roll_ailerons()) {
      total_size += 1 + 4;
    }

    // required float pitch_elevator = 3;
    if (has_pitch_elevator()) {
      total_size += 1 + 4;
    }

    // required float yaw_rudder = 4;
    if (has_yaw_rudder()) {
      total_size += 1 + 4;
    }

    // required float throttle = 5;
    if (has_throttle()) {
      total_size += 1 + 4;
    }

    // optional float aux1 = 6;
    if (has_aux1()) {
      total_size += 1 + 4;
    }

    // optional float aux2 = 7;
    if (has_aux2()) {
      total_size += 1 + 4;
    }

    // optional float aux3 = 8;
    if (has_aux3()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float aux4 = 9;
    if (has_aux4()) {
      total_size += 1 + 4;
    }

    // required uint32 mode = 10;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // required uint32 nav_mode = 11;
    if (has_nav_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nav_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HilControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HilControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HilControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HilControl::MergeFrom(const HilControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_roll_ailerons()) {
      set_roll_ailerons(from.roll_ailerons());
    }
    if (from.has_pitch_elevator()) {
      set_pitch_elevator(from.pitch_elevator());
    }
    if (from.has_yaw_rudder()) {
      set_yaw_rudder(from.yaw_rudder());
    }
    if (from.has_throttle()) {
      set_throttle(from.throttle());
    }
    if (from.has_aux1()) {
      set_aux1(from.aux1());
    }
    if (from.has_aux2()) {
      set_aux2(from.aux2());
    }
    if (from.has_aux3()) {
      set_aux3(from.aux3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aux4()) {
      set_aux4(from.aux4());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_nav_mode()) {
      set_nav_mode(from.nav_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HilControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HilControl::CopyFrom(const HilControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HilControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000061f) != 0x0000061f) return false;

  return true;
}

void HilControl::Swap(HilControl* other) {
  if (other != this) {
    std::swap(time_usec_, other->time_usec_);
    std::swap(roll_ailerons_, other->roll_ailerons_);
    std::swap(pitch_elevator_, other->pitch_elevator_);
    std::swap(yaw_rudder_, other->yaw_rudder_);
    std::swap(throttle_, other->throttle_);
    std::swap(aux1_, other->aux1_);
    std::swap(aux2_, other->aux2_);
    std::swap(aux3_, other->aux3_);
    std::swap(aux4_, other->aux4_);
    std::swap(mode_, other->mode_);
    std::swap(nav_mode_, other->nav_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HilControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HilControl_descriptor_;
  metadata.reflection = HilControl_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace mavlink

// @@protoc_insertion_point(global_scope)
